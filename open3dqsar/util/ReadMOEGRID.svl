//
// ReadMOEGRID.svl
//
// is part of
// 
// Open3DQSAR
// ----------
// 
// An open-source software aimed at high-throughput
// chemometric analysis of molecular interaction fields
// 
// Copyright (C) 2009-2015 Paolo Tosco, Thomas Balle
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
// 
// For further information, please contact:
// 
// Paolo Tosco, PhD
// Dipartimento di Scienza e Tecnologia del Farmaco
// Universita' degli Studi di Torino
// Via Pietro Giuria, 9
// 10125 Torino (Italy)
// Phone:  +39 011 670 7680
// Mobile: +39 348 553 7206
// Fax:    +39 011 670 7687
// E-mail: paolo.tosco@unito.it
//
//
//
// ReadMOEGRID function
//
// this function can be loaded into MOE and used
// to read MOE GRID files generated by Open3DQSAR
//
// Usage:
//
// ReadMOEGRID [ 'filename', 'surface_name', contour_level, rgb_color ]
//
// filename: .mgd file as generated by Open3DQSAR
// surface_name: name to be assigned by MOE to this surface
//               graphic object 
// contour_level: the level at which the isosurface
//                should be contoured
// rgb_color: the RGB color of the surface in
//            0x###### format
//
// To display both the negative and the positive contours
// associated to a .mgd file, load the latter twice assigning
// different surface names and colors, and contouring the
// isosurface at the desired level, as in the following
// example:
//
// ReadMOEGRID['coefficients_fld-01_y-01.mgd', 'coefficients_pos', 1.0e-03, 0xff0000];
// ReadMOEGRID['coefficients_fld-01_y-01.mgd', 'coefficients_neg', -1.0e-03, 0x0000ff];
//


function fread_GRID;
global function ReadMOEGRID[filename, surface_name, contour_level, rgb_color]

	local gtype = 3;
	local shape;
	local data;
	local isovtx;
	local isoidx;
	local points;
	local normals;
	local idx;
	
	
	[shape, data] = first fread_GRID filename;
	[isovtx, isoidx] = grid_iso[data, shape, contour_level, [1, 2, 3]];
	points = grid_isovtx_coord[data, shape, isovtx, contour_level, [1, 2, 3]];
	normals = - grid_isovtx_grad[data, shape, isovtx, contour_level, [1, 2, 3]];
	idx = grid_isoidx_emit[isoidx, gtype, -1];
	GVertex  [GCreate surface_name, gtype, idx, rgb_color, points, normals];
	
endfunction
