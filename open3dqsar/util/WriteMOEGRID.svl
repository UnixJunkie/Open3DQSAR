//
// WriteMOEGRID.svl
//
// is part of
// 
// Open3DQSAR
// ----------
// 
// An open-source software aimed at high-throughput
// chemometric analysis of molecular interaction fields
// 
// Copyright (C) 2009-2014 Paolo Tosco, Thomas Balle
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.
// 
// For further information, please contact:
// 
// Paolo Tosco, PhD
// Dipartimento di Scienza e Tecnologia del Farmaco
// Universita' degli Studi di Torino
// Via Pietro Giuria, 9
// 10125 Torino (Italy)
// Phone:  +39 011 670 7680
// Mobile: +39 348 553 7206
// Fax:    +39 011 670 7687
// E-mail: paolo.tosco@unito.it
//
//
//
// WriteMOEGRID function
//
// this function can be loaded into MOE and used
// to generate MOE GRID files which can be imported
// by Open3DQSAR
//
// Usage:
//
// WriteMOEGRID [ 'sdf_file', 'grid_definition_file', 'basename', 'probe_name' ]
//
// sdf_file: the SDF file containing the ligands (the same which
//           is used by Open3DQSAR)
// grid_definition_file: the SVL file generated by Open3DQSAR
//                       with the "prepare type=MOE_GRID" keyword
// basename: generic name which will be assigned to .mgd file
//           generated by this SVL script; it may include a path.
//           e.g.: '/data/grid/quinoline_moegrid' will generate
//                 in the /data/grid folder as many files as the
//                 number of molecules in the SDF file, named
//                 quinoline_moegrid_XXX.mgd
//                should be contoured
// probe_name: a vector containing one or more GRID probe names as
//             defined in MOE (check the Grid89_ProbeNames[]
//             function in MOE documentation for probe names)
//
// Example:
//
// WriteMOEGRID [ 'quinolines.sdf', 'grid_def.svl', 'quinoline_moegrid', ['C3', 'OH2'] ]
//


function o3q_define_grid_shape;
function open_Op_ReadFile;
function Grid89_ProbeNames;
function Grid89_GenGrid;
function fwrite_GRID;


global function WriteMOEGRID[sdf, moe_grid, base, probe]

  local function add_zeros[number, max_figures]
    return tok_cat cat[totok zero igen (max_figures
      - tok_length totok number), totok number];
  endfunction

  load moe_grid;
  
  local n_probes;
  local shape;
  local opt;
  local chains;
  local n_chains;
  local max_figures;
  local i;
  local j;
  local grid;
  local filename;
  
  
  Close[force:1];
  open_Op_ReadFile[sdf, 'mdl_sdf', [quiet:1]];
  base = fbase base;
  n_probes = length probe;
  if (not n_probes) then
    exit 'Please indicate at least one probe';
  endif
  for i = 1, n_probes loop
    if (not indexof[probe(i), Grid89_ProbeNames[]]) then
      exit tok_cat['The probe type "', probe(i),
        '" is not implemented in MOE'];
    endif
  endloop
  shape = o3q_define_grid_shape[];
  chains = Chains[];
  n_chains = length chains;
  max_figures = length string totok n_chains;
  for i = 1, n_chains loop
    grid = [];
    for j = 1, n_probes loop
      opt = [DRYprobe: (probe(j) == 'DRY')];
      grid(j) = Grid89_GenGrid [shape,
        cat cAtoms chains(i), probe(j), opt];
    endloop
    filename = tok_cat[ base, '_', add_zeros[i, max_figures], '.mgd'];
    fwrite_GRID[filename, cat[[shape], grid], cat[ftail base, probe]];
  endloop
  write['Done.\n'];

  unload moe_grid;
  
endfunction
