/*

stddev.c

is part of

Open3DQSAR
----------

An open-source software aimed at high-throughput
chemometric analysis of molecular interaction fields

Copyright (C) 2009-2013 Paolo Tosco, Thomas Balle

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.

For further information, please contact:

Paolo Tosco, PhD
Dipartimento di Scienza e Tecnologia del Farmaco
Universita' degli Studi di Torino
Via Pietro Giuria, 9
10125 Torino (Italy)
Phone:  +39 011 670 7680
Mobile: +39 348 553 7206
Fax:    +39 011 670 7687
E-mail: paolo.tosco@unito.it

*/


#include <include/o3header.h>


int stddev_x_var(O3Data *od, int field_num)
{
	int i;
	int j;
	int n;
	int flag;
	int result;
	double value;
	double ave;
	double sum1;
	double temp;
	double sumweight;
	double stddev;
	
	
	sumweight = 0.0;
	sum1 = 0.0;
	for (i = 0; i < od->x_vars; ++i) {
		ave = 0.0;
		for (j = 0, n = 0; j < od->object_num; ++j) {
			if (get_object_attr(od, j, ACTIVE_BIT)) {
				result = get_x_value(od, field_num, j, i,
					&value, 0);
				if (result) {
					return CANNOT_READ_TEMP_FILE;
				}
				if (!MISSING(value)) {
					result = get_x_value(od, field_num, j, i,
						&value, CUTOFF_BIT);
					if (result) {
						return CANNOT_READ_TEMP_FILE;
					}
					ave += value;
					++n;
				}
			}
		}
		if (n) {
			ave /= (double)n;
		}
		set_x_var_buf(od, field_num, i, AVE_BUF, ave);
		flag = 0;
		for (j = 0; j < od->object_num; ++j) {
			if (get_object_attr(od, j, ACTIVE_BIT)) {
				result = get_x_value(od, field_num, j, i,
					&value, 0);
				if (result) {
					return CANNOT_READ_TEMP_FILE;
				}
				if (!MISSING(value)) {
					result = get_x_value(od, field_num, j, i,
						&value, CUTOFF_BIT);
					if (result) {
						return CANNOT_READ_TEMP_FILE;
					}
					if (!flag) {
						flag = 1;
						ave = value;
						sum1 = 0.0;
						sumweight = 1.0;
					}
					else {	
						temp = 1.0 + sumweight;
						sum1 += (sumweight * square(value - ave) / temp);
						ave += (value - ave) / temp;
						sumweight = temp;
					}
				}
			}
		}
		stddev = 0.0;
		if (n > 1) {
			stddev = sqrt(sum1 * (double)n /
				((double)(n - 1) * sumweight));
		}
		set_x_var_buf(od, field_num, i, STDDEV_BUF, stddev);
	}
	
	return 0;
}


void stddev_y_var(O3Data *od)
{
	int i;
	int j;
	int flag;
	double value;
	double ave;
	double sum1;
	double temp;
	double sumweight;
	double stddev;
	
	
	sumweight = 0.0;
	sum1 = 0.0;
	
	for (i = 0; i < od->y_vars; ++i) {
		ave = 0.0;
		for (j = 0; j < od->object_num; ++j) {
			if (get_object_attr(od, j, ACTIVE_BIT)) {
				ave += get_y_value(od, j, i, WEIGHT_BIT);
			}
		}
		ave /= od->active_object_num;
		set_y_var_buf(od, i, AVE_BUF, ave);
		flag = 0;
		for (j = 0; j < od->object_num; ++j) {
			if (get_object_attr(od, j, ACTIVE_BIT)) {
				value = get_y_value(od, j, i, 0);
				if (!flag) {
					flag = 1;
					ave = value;
					sum1 = 0.0;
					sumweight = 1.0;
				}
				else {	
					temp = 1.0 + sumweight;
					sum1 += (sumweight * square(value - ave) / temp);
					ave += (value - ave) / temp;
					sumweight = temp;
				}
			}
		}
		stddev = sqrt(sum1 * od->active_object_num /
			((od->active_object_num - 1) * sumweight));
		set_y_var_buf(od, i, STDDEV_BUF, stddev);
	}
}
